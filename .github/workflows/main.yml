name: pytest and publish

on:
  pull_request:
    branches:
      - next
  push:
    branches:
      - main

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest poetry
          poetrry install
      - name: Run pytest
        run: pytest

  release:
    needs: pytest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      POETRY_PYPI_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN }}
    strategy:
      matrix:
        bump_type: [patch, minor, major]
        post_number: [0, 1, 2, 3, 4, 5, 6]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Determine version number
        run: |
          VERSION=$(poetry version | awk '{print $2}' | cut -d'-' -f1)
          PRE_RELEASE=$(poetry version | awk '{print $2}' | cut -d'-' -f2)
          if [[ -z "$PRE_RELEASE" ]]; then
            NEW_VERSION=$VERSION
          else
            NEW_VERSION="$VERSION-post$PRE_RELEASE"
          fi
          echo ::set-output name=version::$NEW_VERSION
        id: version
      - name: Update version number
        run: |
          if [[ "${{ matrix.bump_type }}" != "post" ]]; then
            poetry version ${{ matrix.bump_type }}
          else
            poetry config version $(echo "${{ steps.version.outputs.version }}.${{ matrix.post_number }}")
          fi
      - name: Install dependencies with updated version
        run: poetry install
      - name: Build and publish package
        run: |
          poetry build
          poetry publish
